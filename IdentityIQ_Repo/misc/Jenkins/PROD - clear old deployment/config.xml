<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>TomcatWebappsDir</name>
          <description>Folder on the app server where the war should be placed for staging the new WAR file and cleaning the old deployment.</description>
          <defaultValue>D:\ProgramFiles\Apache\webapps</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>WebappName</name>
          <description>Name of the final deployed application.  Used as part of staging the new build and cleaning up the old build.</description>
          <defaultValue>identityiq</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DeployUserName</name>
          <description>Use domain account, will need to be in the format &apos;DOMAIN\Username&apos;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>DeployUserPass</name>
          <description>Password for the user account that will be used to perform actions on the PROD app servers</description>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>App_Servers</name>
          <description>Comma-separated list of app servers for the environment.  FQDNs preferred.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>workspace\PROD_Modular</customWorkspace>
  <builders>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.3">
      <command>&lt;#
 # This script removes all files from the previous deployment
 # and stages the new WAR file
 #&gt;
$ErrorActionPreference = &quot;Stop&quot;
$workspaceRootDir = ($env:WORKSPACE + &quot;\&quot;)
$buildWarDir = ($workspaceRootDir + &quot;build\deploy\&quot;)
$webAppDir = $env:TomcatWebappsDir
$appName = $env:WebappName
$appFileName = $appName + &quot;.war&quot;
$appServers = [System.Collections.ArrayList]@(($env:App_Servers).split(&quot;,&quot;))
$remoteCreds = New-Object System.Management.Automation.PSCredential($env:DeployUserName,(ConvertTo-SecureString -String $env:DeployUserPass -AsPlainText -Force))
foreach ($srv in $appServers) {
  # Map SMB share to Tomcat webapps directory
  $mappedDestPart = $webAppDir.Replace(&apos;D:\&apos;,&quot;&quot;)
  $mappedDest = (&apos;\\&apos; + $srv + &apos;\D$\&apos; + ($mappedDestPart))
  Write-Host (&quot;Set destination: &quot; + ($mappedDest))
  Write-Host (&quot;Mapping remote destination &quot; + $srv + &quot; to local &apos;T&apos;&quot;)
  New-PSDrive –Name &quot;T&quot; –PSProvider FileSystem –Root $mappedDest # -Credential $remoteCreds
  Write-Host (&quot;Remote destination &quot; + $srv + &quot; successfully mapped to local &apos;T&apos;&quot;)
  $mappedDestDir = (&apos;T:\&apos;)
  # Delete the old WAR file
  if (Test-Path -Path ($mappedDestDir + $appFileName)) {
    Write-Host (&quot;Deleting old application WAR file...&quot;)
    Remove-Item -Path ($mappedDestDir + $appFileName) -Force
    Write-Host (&quot;Old application WAR file deleted&quot;)
  }
  # Delete the old application directory
  if (Test-Path -Path ($mappedDestDir + $appName)) {
    Write-Host (&quot;Deleting old application directory...&quot;)
    Remove-Item -Path ($mappedDestDir + $appName) -Recurse -Force
    Write-Host (&quot;Old application directory deleted&quot;)
  }
  # Copy war to remote server
  if (!(Test-Path -Path ($mappedDestDir + $appFileName))) {
    Write-Host (&quot;Copying new WAR file...&quot;)
    Copy-Item -Path ($buildWarDir + $appFileName) -Destination ($mappedDestDir + $appFileName)
    Write-Host (&quot;New WAR file copy completed.&quot;)
  }
  # Unmap the SMB share/drive
  Write-Host (&quot;Disconnecting from SMB drive...&quot;)
  Remove-PSDrive –PSProvider FileSystem -Name &quot;T&quot;
  Write-Host (&quot;SMB drive disconnection complete.&quot;)
}</command>
    </hudson.plugins.powershell.PowerShell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>