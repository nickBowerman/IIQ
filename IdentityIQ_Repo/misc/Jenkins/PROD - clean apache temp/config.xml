<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>App_Servers</name>
          <description>Comma-separated list of app servers for the environment.  FQDNs preferred.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DeployUserName</name>
          <description>Use domain account, will need to be in the format &apos;DOMAIN\Username&apos;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>DeployUserPass</name>
          <description>Password for the user account that will be used to perform actions on the PROD app servers</description>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TomcatWebappsDir</name>
          <description>Folder on the app server where the war should be placed for staging the new WAR file and cleaning the old deployment.</description>
          <defaultValue>D:\ProgramFiles\Apache\webapps</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <customWorkspace>workspace\PROD_Modular</customWorkspace>
  <builders>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.3">
      <command>&lt;#
 # This script cleans up the Apache temp directory
 # and archives old log files
 #&gt;
$ErrorActionPreference = &quot;Stop&quot;
$apacheDir = (($env:TomcatWebappsDir).Replace(&quot;\webapps&quot;,&quot;&quot;))
$logsDir = &quot;logs&quot;
$logsArchiveDir = &quot;old_logs&quot;
$tempDir = &quot;temp&quot;
$datestamp = Get-Date -Format yyyy-MM-dd
$appServers = [System.Collections.ArrayList]@(($env:App_Servers).split(&quot;,&quot;))
$remoteCreds = New-Object System.Management.Automation.PSCredential($env:DeployUserName,(ConvertTo-SecureString -String $env:DeployUserPass -AsPlainText -Force))
foreach ($srv in $appServers) {
  # Map SMB share to Tomcat directory
  $mappedDestPart = $apacheDir.Replace(&apos;D:\&apos;,&quot;&quot;)
  $mappedDest = (&apos;\\&apos; + $srv + &apos;\D$\&apos; + ($mappedDestPart))
  Write-Host (&quot;Set destination: &quot; + ($mappedDest))
  Write-Host (&quot;Mapping remote destination &quot; + $srv + &quot; to local &apos;T&apos;&quot;)
  New-PSDrive –Name &quot;T&quot; –PSProvider FileSystem –Root $mappedDest # -Credential $remoteCreds
  Write-Host (&quot;Remote destination &quot; + $srv + &quot; successfully mapped to local &apos;T&apos;&quot;)
  $mappedDestDir = (&apos;T:\&apos;)
  # Delete temp files
  if (Test-Path -Path ($mappedDestDir + $tempDir)) {
    Write-Host (&quot;Deleting old temp files...&quot;)
    Remove-Item -Path ($mappedDestDir + $tempDir + &quot;\*&quot;) -Recurse -Force
    Write-Host (&quot;Old temp files deleted&quot;)
  }
  # Check for log archival directory, create if it doesn&apos;t exist
  # As log archival failed, we&apos;re going to skip the zipping (for now) and simply purge (it is DEV, after all...)
  if (!(Test-Path -Path ($mappedDestDir + $logsArchiveDir))) {
    # Archival directory does not exist, create it
	Write-Host (&quot;Log archival directory not found, creating it...&quot;)
	New-Item -Path ($mappedDestDir + $logsArchiveDir) -ItemType Directory
	Write-Host (&quot;Log archival directory created.&quot;)
  }
  # Archive old logs
  if ((Test-Path -Path ($mappedDestDir + $logsArchiveDir)) -And (Test-Path -Path ($mappedDestDir + $logsDir))) {
    Write-Host (&quot;Archiving old logs...&quot;)
	try {
	  # Have to back-convert the mapped drive to resolve the full path
	  $srcDir = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($mappedDestDir + $logsDir)
	  $destZip = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($mappedDestDir + $logsArchiveDir + &quot;\logs_archive_&quot; + $datestamp + &quot;.zip&quot;)
	  # &apos;Compress-Archive is the preferred method, but is only available in PowerShell v5 or newer...
	  if ($PSVersionTable.PSVersion.Major -ge 5) {
		Compress-Archive -Path ($srcDir + &quot;\*&quot;) -CompressionLevel Optimal -DestinationPath $destZip
		Write-Host (&quot;Old log archival complete.&quot;)
	  }
	  elseif ($PSVersionTable.PSVersion.Major -ge 3) {
		# This is going to be a bit more tedious...
		# Import the .NET 4.5+ compression assembly
		Add-Type -As System.IO.Compression.FileSystem
		# Call the CreateFromDirectory method to archive the logs
		[IO.Compression.ZipFile]::CreateFromDirectory($srcDir, $destZip)
		Write-Host (&quot;Old log archival complete.&quot;)
	  }
	  else {
		Write-Host (&quot;Current PowerShell runtime version: &quot; + $PSVersionTable.PSVersion.Major + &quot; is not supported, and is deprecated by Microsoft.&quot;)
		Write-Host (&quot;WARNING:  LOGS WILL NOT BE ARCHIVED, BUT WILL STILL BE DELETED FROM THE LOGS DIRECTORY!!!&quot;)
	  }
	}
	catch {
	  # Archival failed, catch the exception and make a note but continue the rest of the process
	  Write-Host (&quot;An error occurred when attempting to archive old logs.&quot;)
	  Write-Host (&quot;Exception: &quot; + $_.Exception.Message)
	  Write-Host (&quot;Inner Exception: &quot; + $_.Exception.InnerException)
	}
  }
  # Remove old logs now that archival is complete
  if (Test-Path -Path ($mappedDestDir + $logsDir)) {
    Write-Host (&quot;Cleaning up old logs...&quot;)
    Remove-Item -Path ($mappedDestDir + $logsDir + &quot;\*&quot;) -Recurse -Force
    Write-Host (&quot;Old log cleanup complete.&quot;)
  }
  # Unmap the SMB share/drive
  Write-Host (&quot;Disconnecting from SMB drive...&quot;)
  Remove-PSDrive –PSProvider FileSystem -Name &quot;T&quot;
  Write-Host (&quot;SMB drive disconnection complete.&quot;)
}</command>
    </hudson.plugins.powershell.PowerShell>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>